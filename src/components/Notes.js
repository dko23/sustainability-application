import React from 'react'
import { useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { nanoid } from '@reduxjs/toolkit'
import { actionAdded } from '../features/postSlice'
import { motion } from "framer-motion"
import AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';
import TextField from '@mui/material/TextField';
import axios from 'axios';// communicate with the server






function PostGreen() {
  const [month, setMonth] = useState('');
  const [electricity, setElectricity] = useState(0);
  const [water, setWater] = useState(0);
  const [action, setAction] = useState('');
  const [actionDate, setActionDate] = useState('');


  const dispatch = useDispatch()
 
  
  // const saveAction = () => {
  //   dispatch(
  //     actionAdded({
  //       id: nanoid(),
  //       month,
  //       electricity,
  //       water,
  //       action,
  //       actionDate,



  //     })
  //   );
  // };// save for later

  const saveAction = async () => {
    try {
      await axios.post('http://localhost:5000/bills', {
      
      
        month,
        electricity,
        water,
        action,
        actionDate,
        
      });
      // Handle the response if needed

      // Dispatch the action to update Redux store
      dispatch(
        actionAdded({
          
         
          month,
          electricity,
          water,
          action,
          actionDate,
          
          
        })
      );
      window.location.reload();
    } catch (error) {
      // Handle any error that occurred during the request
    }
  };




  const onMonthChanged = e => setMonth(e.target.value)
  const onElectricityChanged = e => setElectricity(e.target.value)
  const onWaterChanged = e => setWater(e.target.value)
  const onActionChanged = e => setAction(e.target.value)
  const onActionDateChanged = e => setActionDate(e.target.value)


  const handleFormSubmit = (event) => {
    event.preventDefault(); // Prevent the default form submission behavior
  }

  return (
    <motion.div
      // whileHover={{ scale: 1.1 }}
      // whileTap={{ scale: 0.9 }}
      
      >
      <>
        <form onSubmit={handleFormSubmit} className='action'>

          <div className='add'>
            <TextField id="outlined-basic" label="Month" variant="outlined" type="text"
              value={month}
              onChange={onMonthChanged}
              required
              />
          </div>
          <div className='add'>
            <TextField id="outlined-basic" label="Electricity,&#8373;" variant="outlined" type="number"
              value={electricity}
              onChange={onElectricityChanged}
              required />
          </div>


          <div className='add'>
            <TextField id="outlined-basic" label="Water, &#8373; " variant="outlined" type="number"
              value={water}
              onChange={onWaterChanged}
              required />
          </div>
          {/* <div>
              <TextField id="outlined-basic"
                label='notes'
                      value={action}
                      onChange={onActionChanged}  multiline
                fullWidth sx={{ width: 300 }} />     
              
  </div>
               */}

          <TextField
            id="outlined-basic"
            type="date"
            label="Action Date"
            value={actionDate}
            onChange={onActionDateChanged}
            required
            InputLabelProps={{
              shrink: true,
            }}
          />


          <motion.div className='add'   whileHover={{
        scale: 1.2,
        transition: { yoyo: Infinity },
    }}>
            <AddCircleRoundedIcon variant="contained" type="button" onClick={saveAction} style={{ fontSize: "2rem" }} />
          </motion.div>
        </form>
      </>

    </motion.div>
  )
}

export default PostGreen


{/* <motion.button

        
        
/> */}


Issue:
You were facing an issue with your React application when trying to delete a newly created bill without refreshing the page. The issue was that the newly created bills didn't have an _id immediately upon creation, which was causing a problem when trying to delete them.

Solution:
You identified that the newly created bills were missing the _id field until the page was refreshed. This was because the _id is generated by the MongoDB server upon insertion, and you were not immediately fetching the updated data after creating a new bill. As a result, the Redux state did not have the _id of the newly created bill, causing deletion to fail.

To solve this, you made the following changes:

In your saveAction function, you made an axios POST request to create a new bill on the server.

After successfully creating the bill on the server, you dispatched the actionAdded action to update the Redux state with the new bill data. However, you didn't have the _id immediately available in the Redux state.

To address this, you made another GET request to fetch the updated list of bills from the server and updated the Redux state with the fetched data. This ensured that the _id of the newly created bill was included in the Redux state.

With the _id available in the Redux state, you were able to successfully delete the newly created bills without needing to refresh the page.

You confirmed that adding the posts.id in the saveAction function worked as expected, and the issue was resolved.

Remember that the key takeaway here is that after creating a new bill on the server, you need to fetch the updated list of bills from the server to include the _id of the newly created bill in your Redux state.

Feel free to use this review as a reference for your documentation! If you have any more questions or need further assistance, please don't hesitate to ask.

const saveAction = async () => {
  try {
    const response = await axios.post('http://localhost:5000/postbill', {
      month,
      electricity,
      water,
      action,
      actionDate,
    });

    const newBill = response.data; // Extract the newly created bill from the response

    // Dispatch the action to update Redux store with the newly created bill
    dispatch(
      actionAdded({
        id: newBill._id, // Use the generated _id from the response
        month: newBill.month,
        electricity: newBill.electricity,
        water: newBill.water,
        action: newBill.action,
        actionDate: newBill.actionDate,
      })
    );
  } catch (error) {
    // Handle any error that occurred during the request
    console.error('Error creating bill', error);
  }
};
//*This to be used as reference



